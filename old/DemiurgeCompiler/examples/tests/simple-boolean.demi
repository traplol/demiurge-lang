extern func printf(string,...):void;

func test9() : int { // expected 1
    if (1==1) return 1;
    return 0;
}
func test10() : int { // expected 0
    if (1!=1) return 1;
    return 0;
}
func test11() : int { // expected 1
    if (1>=1) return 1;
    return 0;
}
func test12() : int { // expected 1
    if (1<=1) return 1;
    return 0;
}
func test13() : int { // expected 0
    if (1>1) return 1;
    return 0;
}
func test14() : int { // expected 0
    if (1<1) return 1;
    return 0;
}

func test15() : int { // expected 0
    if (2==1) return 1;
    return 0;
}
func test16() : int { // expected 1
    if (2!=1) return 1;
    return 0;
}
func test17() : int { // expected 1
    if (2>=1) return 1;
    return 0;
}
func test18() : int { // expected 0
    if (2<=1) return 1;
    return 0;
}
func test19() : int { //expected 1
    if (2>1) return 1;
    return 0;
}
func test20() : int { // expected 0
    if (2<1) return 1;
    return 0;
}

func test31() : int { // expected 0
    if (false == true) return 1;
    return 0;
}

func test32() : int { // expected 1
    if (false == false) return 1;
    return 0;
}

func test33() : int { // expected 1
    if (true == true) return 1;
    return 0;
}

func assert(funcName: string, expected: int, result: int) : int {
    var passfail = "failed";
    if (expected == result)
        passfail = "passed";
    printf("%s : expected: %lld result: %lld - %s\n", funcName, expected, result, passfail);
    return 0;
}

func main() : int {
    assert("test9", 1, test9());
    assert("test10", 0, test10());
    assert("test11", 1, test11());
    assert("test12", 1, test12());
    assert("test13", 0, test13());
    assert("test14", 0, test14());
    assert("test15", 0, test15());
    assert("test16", 1, test16());
    assert("test17", 1, test17());
    assert("test18", 0, test18());
    assert("test19", 1, test19());
    assert("test20", 0, test20());
    assert("test31", 0, test31());
    assert("test32", 1, test32());
    assert("test33", 1, test33());
    return 0;
}